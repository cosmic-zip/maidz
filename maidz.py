#!/usr/bin/env python3
# -----------------------------------------------------------------------------#
#   MaidZ Cybersecurity Companion                                              #
#   Copyright (C) 2024  cosmic-zip                                             #
#                                                                              #
#                                                                              #
#   This program is free software: you can redistribute it and/or modify       #
#   it under the terms of the GNU Affero General Public License as published   #
#   by the Free Software Foundation, either version 3 of the License, or       #
#   (at your option) any later version.                                        #
#                                                                              #
#   This program is distributed in the hope that it will be useful,            #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#   GNU Affero General Public License for more details.                        #
#                                                                              #
#   You should have received a copy of the GNU Affero General Public License   #
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.     #
# -----------------------------------------------------------------------------#


import json
import os
import sys
import time
import re
import subprocess
import platform
import logging
from datetime import datetime
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlparse, parse_qs


def banner():
    os.system("chafa apron/assets/sakuya_izayoi.png")
    print(
        """
        \n\033[1m
            [maidz] Cybersecurity companion
            Use maidz help to see all options
        \033[0m
        """
    )

def import_bank():
    try:
        with open("apron/assets/bank.json", "r") as bank:
            return json.load(bank)
    except json.JSONDecodeError as e:
        print(f"JSON::ERROR {e}")


def puts(string: str, color: str = ""):
    color_emojis = {
        "purple": "üü£",
        "red": "üî¥",
        "green": "üü¢",
        "yellow": "üü°",
        "blue": "üîµ",
        "orange": "üü†",
        "white": "‚ö™",
        "black": "‚ö´",
    }
    emoji = ""
    if color != "":
        emoji = color_emojis.get(color)
    print(f"\033[1m{emoji} {string}\033[0m")

def wrap(text, width=160):
    wrapped_lines = []
    for line in text.split('\n'):
        while len(line) > width:
            wrapped_lines.append(line[:width])
            line = line[width:]
        wrapped_lines.append(line)
    return '\n'.join(wrapped_lines)

def logfile(command: dict):

    log = {
        "name": command["name"],
        "origin": command["command"],
        "output": command["output"],
        "datetime": str(datetime.now()),
    }

    with open('apron/output/maid_exec_doc.jsonl', 'a') as f:
        parsed = json.dumps(log, sort_keys=True)
        f.write(f"{parsed}\n")
        f.close()

def exec(command):
    try:
        log = {}
        puts(command["name"], "purple")
        result = subprocess.run(command["command"], shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            output = result.stdout
            command["output"] = wrap(output)
            logfile(command)
            print( command["output"])
        else:
            puts(f"Error: {result.stderr}", "red")
    except Exception as err:
        puts(str(err), "red")

def key_value(term: str, args: list):

    if len(args) < 1:
        print("Args are to small")

    for index, item in enumerate(args):
        if item == term:
            if index + 1 >= len(args):
                puts("Incomplete key-value constrain :: return empty")
                return ""
            # print(args[index +1])
            return args[index + 1]

    puts(f"No value found for key: {term} :: return empty")
    return ""


def query(data: dict, args: list):

    name = ""
    content = ""
    description = ""
    pattern = r"\s*@@(\w+)\s*"

    for ctn in data:
        if ctn["name"] == args[1]:
            content = ctn["command"]
            name = ctn["name"]
            description = ctn["description"]

    if not content:
        puts(f"Command not found for {args[1]}", "red")
        return None

    matches = re.findall(pattern, content)
    for match in matches:
        key = match.strip()
        value = key_value(f"--{key}", args)
        content = content.replace(f"@@{key}", value)

    # print(content)
    return {"name": name, "command": content, "description": description}


def exec_batch(chunk: dict, args: list, delay = None):

    for q in chunk:
        out = query(chunk, args)
        if delay:
            time.sleep(delay)
        print(out)


def help(verbose: bool = False):

    data = import_bank()
    data = data["general"]

    for d in data:
        puts(d["name"], "yellow")
        puts(f"\n\t{d['description']}")
        if verbose:
            print(f"\n\t{d['command']}\n")
        print("")


def install_deps():
    deps = import_bank()
    deps = deps["deps"]
    for pkg in deps:
        puts(f"PKG :: {pkg}")
        os.system(f"sudo apt install {pkg} -y")

def get_ram_usage():
    with open('/proc/meminfo', 'r') as f:
        lines = f.readlines()
    mem_total = int(lines[0].split()[1])
    mem_free = int(lines[1].split()[1])
    mem_available = int(lines[2].split()[1])
    return mem_total, mem_free, mem_available

def get_desktop_environment():
    desktop_session = os.environ.get('DESKTOP_SESSION')
    if desktop_session:
        if desktop_session == 'ubuntu':
            return 'GNOME'
        return desktop_session
    elif os.environ.get('GNOME_DESKTOP_SESSION_ID'):
        return 'GNOME'
    elif os.environ.get('KDE_FULL_SESSION'):
        return 'KDE'
    elif os.environ.get('XDG_CURRENT_DESKTOP'):
        return os.environ.get('XDG_CURRENT_DESKTOP')
    else:
        return 'Unknown'


def maidztop():

    with open('/proc/loadavg', 'r') as f:
        load_avg = f.readline().strip().split()[:3]
    cpu_load = tuple(float(x) for x in load_avg)

    mem_total, mem_free, mem_available = get_ram_usage()
    os_name = platform.system()
    kernel_version = platform.release()
    shell = os.environ.get('SHELL')
    desktop_environment = get_desktop_environment()

    var = f"""
        [?25l[0m [38;2;0;0;0m                      [38;2;52;62;50m‚ñÖ[38;2;31;39;27m‚ñÅ  [0m [38;2;152;158;151m‚ñÇ[38;2;226;227;227m‚ñÇ[38;2;245;245;245m‚ñÇ[38;2;240;241;240m‚ñÇ[38;2;226;229;229m‚ñÇ[38;2;204;213;207m‚ñÅ[0m [38;2;0;0;0m               [0m
        [38;2;0;0;0m                     [7m[38;2;39;52;31m‚ñä[0m[38;2;60;63;60;48;2;75;74;75m‚ñç[38;2;47;49;45;48;2;68;69;68m‚îä[0m[38;2;205;205;205m‚ñÑ[38;2;190;191;189m‚ñÜ[38;2;42;42;41;48;2;211;214;210m‚ñÇ[38;2;32;32;32;48;2;233;233;234m‚ñÉ[38;2;57;57;57;48;2;243;243;243m‚ñÑ[38;2;24;24;23;48;2;226;226;226m‚ñÉ[38;2;56;56;56;48;2;248;248;248m‚ñÉ[38;2;79;79;79;48;2;250;251;251m‚ñÇ[38;2;129;129;129;48;2;243;243;242m‚ñÅ[38;2;247;248;247;48;2;152;162;150m‚ñá[0m[38;2;223;225;222m‚ñÜ[38;2;196;199;194m‚ñÑ[38;2;130;139;129m‚ñÅ            [0m
        [38;2;0;0;0m                     [7m[38;2;37;43;33m‚ñç[0m[38;2;121;123;124;48;2;74;73;73m‚ñù[38;2;92;92;93;48;2;162;162;162m‚ñÜ[38;2;97;97;98;48;2;146;146;146m‚ñá[38;2;55;55;56;48;2;99;99;99m‚ñÜ[38;2;41;41;41;48;2;36;36;36m‚ñè[38;2;36;36;36;48;2;31;31;31m‚ñÇ[38;2;34;34;34;48;2;29;29;29m‚ñÇ[38;2;32;32;32;48;2;28;28;28m‚ñÉ[38;2;31;31;31m‚ñÉ[38;2;30;30;30m‚ñÉ[48;2;20;20;20m‚ñÜ[38;2;37;37;37;48;2;197;197;197m‚ñá[38;2;43;43;43m‚ñÑ[38;2;120;120;120;48;2;234;234;234m‚ñÉ[38;2;251;250;249;48;2;239;241;239m‚îà[0m[38;2;193;197;194m‚ñÖ[0m [38;2;42;49;42m [38;2;41;55;31m‚ñÅ[38;2;45;54;42m‚ñÇ[38;2;48;59;44m‚ñÉ[0m [38;2;3;5;2m     [0m
        [38;2;0;0;0m                    [38;2;30;37;24m‚ñó[7m[38;2;47;47;47m‚ñò[0m[38;2;48;48;48;48;2;79;79;78m‚ñÜ[38;2;68;68;69;48;2;53;53;53m‚ñó[38;2;110;110;112;48;2;81;81;82m‚ñÑ[38;2;78;78;79;48;2;54;54;55m‚ñÉ[38;2;122;122;122;48;2;52;52;52m‚ñÇ[38;2;72;72;72;48;2;48;48;48m‚ñÇ[38;2;82;82;82;48;2;49;49;49m‚ñÅ[38;2;55;55;55;48;2;41;41;41m‚ñÉ[38;2;51;51;51;48;2;39;39;39m‚ñÑ[38;2;48;48;48;48;2;37;37;37m‚ñÑ[38;2;47;47;47m‚ñÑ[38;2;49;49;49;48;2;39;39;39m‚ñÉ[38;2;46;46;46m‚ñÖ[48;2;117;116;117m‚ñâ[38;2;102;102;102;48;2;230;230;230m‚ñÇ[38;2;243;243;243;48;2;247;247;248m‚ñä[38;2;43;49;42;48;2;193;193;193m‚ñù[38;2;141;141;140;48;2;53;56;53m‚ñÇ[38;2;100;101;100;48;2;57;57;57m‚ñÑ[38;2;56;59;61;48;2;69;69;68m‚ñó[0m[38;2;45;53;42m‚ñç      [0m
        [38;2;0;0;0m                   [0m [38;2;20;24;16;48;2;35;37;34m‚ñè[38;2;39;39;39;48;2;41;41;41m‚ñÑ[38;2;45;45;45;48;2;42;42;42m‚ñù[38;2;51;50;50;48;2;48;47;47m‚îä[38;2;111;111;107;48;2;50;49;48m‚ïª[38;2;69;68;68;48;2;50;50;50m‚ñù[38;2;52;52;52;48;2;91;91;91m‚ñÜ[38;2;45;45;46;48;2;76;76;78m‚ñÖ[38;2;59;59;59;48;2;98;98;100m‚ñÑ[38;2;54;54;54;48;2;112;112;114m‚ñÑ[38;2;85;85;87;48;2;63;63;64m‚ñù[38;2;104;104;104;48;2;66;66;66m‚ñò[38;2;147;147;147;48;2;83;83;83m‚îÅ[38;2;130;130;130;48;2;63;63;63m‚ñó[38;2;146;146;146;48;2;72;72;72m‚ññ[38;2;95;95;95;48;2;61;61;61m‚ñÖ[38;2;94;94;94;48;2;160;160;160m‚ñâ[38;2;201;201;201;48;2;238;238;238m‚ñÅ[38;2;244;244;244;48;2;152;152;152m‚ñã[38;2;191;191;191;48;2;130;130;130m‚ñÜ[38;2;188;188;188;48;2;104;104;104m‚ï∏[0m[7m[38;2;45;50;43m‚ñó[0m[38;2;7;9;5m       [0m
        [38;2;0;0;0m                  [38;2;63;72;53m‚îó[7m[38;2;37;40;34m‚ññ[0m[38;2;32;32;32;48;2;44;44;44m‚ñá[38;2;36;36;36;48;2;38;38;38m‚ñÖ[48;2;39;39;39m‚îà[38;2;226;212;199;48;2;60;57;54m‚ñó[38;2;217;206;196;48;2;47;44;41m‚ñå[38;2;37;37;37;48;2;41;40;41m‚ñÑ[38;2;26;26;26;48;2;39;39;39m‚ñó[38;2;25;25;25;48;2;34;34;34m‚ñè[38;2;43;43;43;48;2;42;42;42m‚îä[38;2;173;165;159;48;2;39;39;38m‚ñó[38;2;102;98;93;48;2;45;45;44m‚ñè[38;2;43;43;42;48;2;50;50;50m‚ñÜ[38;2;44;44;44;48;2;52;52;52m‚ñÜ[38;2;50;50;50;48;2;66;66;66m‚ñá[38;2;54;54;54;48;2;76;76;76m‚ñÜ[38;2;51;51;51;48;2;66;66;66m‚ñÖ[38;2;62;62;62;48;2;50;50;50m‚ñò[38;2;70;70;70;48;2;205;205;205m‚ñä[38;2;139;139;139;48;2;195;195;195m‚ññ[38;2;59;58;59;48;2;162;162;162m‚ñÅ[38;2;61;64;60;48;2;22;26;20m‚ñä[0m [38;2;16;21;11m       [0m
        [38;2;0;0;0m                  [38;2;30;39;23m‚îè[38;2;36;43;30;48;2;21;21;21m‚ñò[38;2;38;38;38;48;2;33;33;34m‚îõ[38;2;38;37;37;48;2;97;94;89m‚ñâ[38;2;126;123;117;48;2;57;54;51m‚ñé[38;2;100;92;85;48;2;225;208;193m‚ñè[38;2;71;65;63;48;2;216;200;188m‚ñù[38;2;31;32;31;48;2;34;34;33m‚îä[38;2;16;16;17;48;2;29;28;28m‚ï±[38;2;32;34;37;48;2;43;41;40m‚ï¥[38;2;176;169;164;48;2;76;72;69m‚ññ[38;2;79;73;68;48;2;209;194;180m‚ñò[38;2;214;199;186;48;2;49;47;45m‚ñé[38;2;36;36;36;48;2;39;40;38m‚ñá[48;2;39;39;39m‚ñÑ[38;2;44;44;44m‚ñù[38;2;41;41;41;48;2;45;45;45m‚ñÑ[38;2;42;42;42m‚ñÉ[38;2;43;43;43;48;2;46;46;46m‚ñÉ[38;2;44;44;44;48;2;39;39;39m‚ññ[38;2;133;133;133;48;2;76;75;76m‚ïπ[38;2;35;38;35;48;2;25;31;22m‚ñâ[0m [38;2;23;30;20m        [0m
        [38;2;0;0;0m                  [7m[38;2;34;40;27m‚ññ[0m[38;2;34;34;36;48;2;24;26;24m‚ï∂[38;2;40;40;41;48;2;33;32;32m‚ï∑[38;2;197;188;179;48;2;73;63;62m‚ñÖ[38;2;201;196;194;48;2;77;76;94m‚ñã[38;2;36;34;60;48;2;186;172;159m‚ñÜ[38;2;110;101;114;48;2;245;226;211m‚ññ[38;2;33;30;27;48;2;221;205;193m‚ñù[38;2;223;206;195;48;2;63;62;59m‚ñÑ[38;2;241;223;210;48;2;131;122;115m‚ñá[38;2;138;128;120;48;2;234;217;204m‚ïπ[38;2;108;94;84;48;2;248;229;213m‚ñÅ[38;2;212;198;186;48;2;78;72;67m‚ñç[38;2;177;167;159;48;2;58;54;49m‚ñä[38;2;32;31;31;48;2;33;34;33m‚ñÅ[38;2;34;34;35;48;2;36;36;35m‚ñÑ[38;2;35;35;35;48;2;38;38;38m‚ñÉ[38;2;37;37;37;48;2;39;39;39m‚ñÑ[38;2;38;38;38;48;2;41;41;41m‚ñÑ[38;2;39;38;39;48;2;22;22;21m‚ñä[38;2;39;41;38;48;2;23;26;22m‚ñâ[0m[38;2;53;64;51m‚ñò         [0m    {f"‚¨• CPU: {cpu_load[1]*100}%"}
        [38;2;0;0;0m                   [7m[38;2;33;36;29m‚ñè[0m[38;2;41;38;38;48;2;155;143;136m‚ñâ[38;2;254;233;221;48;2;242;224;212m‚ï¥[38;2;145;143;157;48;2;250;234;223m‚ñù[38;2;237;221;212;48;2;49;53;90m‚ñÖ[38;2;245;229;217;48;2;171;163;167m‚ñá[38;2;251;234;219;48;2;252;234;218m‚îØ[38;2;252;234;218;48;2;252;233;221m‚ñã[38;2;252;233;219;48;2;251;233;222m‚ñä[38;2;231;220;213;48;2;99;97;107m‚ñâ[38;2;53;59;97;48;2;34;35;66m‚ñÅ[38;2;96;99;131;48;2;25;25;54m‚ñÅ[38;2;202;197;196;48;2;65;54;50m‚ñÜ[38;2;77;70;69;48;2;32;31;31m‚ñè[38;2;33;33;33;48;2;33;32;32m‚ï¥[38;2;18;18;18;48;2;30;30;30m‚ïª[38;2;34;34;34;48;2;37;37;37m‚ï¥[38;2;49;49;49;48;2;35;35;35m‚ñç[38;2;12;13;13;48;2;30;29;30m‚ïª[0m[38;2;61;65;59m‚ñå          [0m    {f"‚¨• Total RAM: {int(mem_total/1024)} MB"}
        [38;2;0;0;0m                  [7m[38;2;37;45;30m‚ñä[0m[38;2;64;63;60;48;2;55;56;54m‚ï¥[38;2;77;68;66;48;2;50;49;49m‚ñù[38;2;104;89;86;48;2;238;218;207m‚ññ[38;2;252;231;218;48;2;252;232;218m‚ñÅ[38;2;252;233;219;48;2;251;235;218m‚ñÜ[48;2;251;235;217m‚ñÜ[48;2;252;233;218m‚î∑[38;2;253;234;217;48;2;252;234;218m‚ï∫[38;2;252;235;218;48;2;252;233;218m‚ñÜ[38;2;252;233;219;48;2;245;231;222m‚ñá[38;2;242;225;215;48;2;92;92;116m‚ñá[38;2;244;228;217;48;2;117;117;136m‚ñá[38;2;138;131;122;48;2;238;222;210m‚ñù[38;2;140;133;125;48;2;60;56;54m‚îõ[38;2;56;52;53;48;2;39;37;38m‚ïª[38;2;74;75;75;48;2;32;32;32m‚ñÇ[38;2;47;47;47;48;2;31;31;31m‚ñç[38;2;46;43;44;48;2;35;35;35m‚ñÇ[38;2;28;26;26;48;2;38;40;37m‚ï∏[0m[38;2;47;56;43m‚ñò          [0m    {f"‚¨• Free RAM: {int(mem_free/1024)} MB"}
        [38;2;0;0;0m                  [7m[38;2;46;49;41m‚ñò[0m[38;2;40;41;40;48;2;44;44;44m‚ñÇ[38;2;135;135;135;48;2;59;59;60m‚îè[38;2;119;122;123;48;2;77;75;73m‚ï∑[38;2;60;52;47;48;2;223;204;194m‚ññ[38;2;251;232;218;48;2;251;231;218m‚îä[38;2;249;229;216;48;2;251;232;218m‚ï∫[38;2;244;225;211;48;2;252;233;218m‚ïæ[38;2;251;233;219m‚î≥[38;2;252;233;219;48;2;252;235;219m‚ñÖ[38;2;253;233;218;48;2;252;232;218m‚ï¥[38;2;250;212;206;48;2;252;231;219m‚ñÇ[38;2;247;196;196;48;2;251;227;216m‚ñÉ[38;2;108;88;85;48;2;221;180;181m‚ñù[38;2;149;126;127;48;2;67;53;54m‚ïç[38;2;104;97;95;48;2;43;41;41m‚ï∏[38;2;124;124;124;48;2;77;77;77m‚îõ[38;2;22;23;21;48;2;33;33;33m‚ñÜ[0m[7m[38;2;34;41;27m‚ñÜ[0m [38;2;0;0;0m           [0m    {f"‚¨• Available RAM: {int(mem_available/1024)} MB"}
        [38;2;0;0;0m                 [7m[38;2;35;45;28m‚ñä[0m[38;2;39;41;39;48;2;38;39;37m‚îà[38;2;37;37;36;48;2;67;65;66m‚ñâ[38;2;62;64;63;48;2;175;175;175m‚ñó[38;2;116;115;115;48;2;36;36;36m‚ñò[38;2;32;35;33;48;2;35;34;34m‚ï¥[38;2;47;35;36;48;2;173;157;157m‚ïæ[38;2;173;153;153;48;2;239;219;208m‚ññ[38;2;188;169;170;48;2;251;229;218m‚ñÇ[38;2;213;193;192;48;2;236;215;207m‚ïª[38;2;195;154;154;48;2;234;214;209m‚ï∂[38;2;131;89;101;48;2;226;202;212m‚îÄ[38;2;128;94;102;48;2;223;195;213m‚îÅ[38;2;63;55;60;48;2;197;152;156m‚ñÜ[38;2;22;22;24;48;2;36;30;30m‚ï¥[38;2;54;53;54;48;2;22;23;23m‚ññ[38;2;48;48;48;48;2;57;56;57m‚ñö[38;2;46;46;46;48;2;26;26;26m‚ñã[38;2;21;21;21;48;2;36;38;34m‚îä[0m [38;2;43;55;26m            [0m    {f"‚¨• OS Name: {os_name}"}
        [38;2;0;0;0m                 [7m[38;2;42;47;36m‚ñç[0m[38;2;29;29;32;48;2;33;33;34m‚ï¥[38;2;53;54;55;48;2;33;31;33m‚ñé[38;2;127;113;177;48;2;49;48;50m‚ñÇ[38;2;132;125;176;48;2;64;62;62m‚ñÉ[38;2;199;194;196;48;2;110;102;104m‚ñó[38;2;252;253;253;48;2;250;250;251m‚îä[38;2;253;252;253;48;2;253;251;252m‚ñá[48;2;253;253;253m [38;2;252;253;253;48;2;252;252;253m‚ï∫[38;2;250;249;250;48;2;252;252;251m‚ñÅ[38;2;212;215;249;48;2;242;243;252m‚ñù[38;2;204;213;252;48;2;209;213;251m‚îä[38;2;209;202;227;48;2;45;39;43m‚ñé[38;2;20;22;21;48;2;33;33;33m‚ñç[38;2;66;66;66;48;2;31;31;31m‚ñé[38;2;59;59;59;48;2;43;43;43m‚ñé[38;2;23;23;23;48;2;32;32;32m‚ï±[38;2;32;32;32;48;2;45;47;41m‚ñâ[0m[38;2;45;54;37m‚ñé            [0m    {f"‚¨• Kernel Version: {kernel_version}"}
        [38;2;0;0;0m                 [7m[38;2;82;86;79m‚ñé[0m[38;2;94;92;149;48;2;45;43;48m‚ñÇ[38;2;58;49;70;48;2;126;120;197m‚ñò[38;2;136;134;183;48;2;133;124;203m‚ñÖ[38;2;171;169;172;48;2;97;90;130m‚ñÑ[38;2;138;138;137;48;2;204;203;205m‚ñÉ[38;2;141;141;141;48;2;241;241;241m‚ïº[38;2;247;247;247;48;2;234;234;235m‚îà[38;2;236;236;236;48;2;247;247;247m‚ññ[38;2;242;242;242;48;2;250;250;250m‚îÄ[38;2;233;234;234;48;2;247;247;247m‚ñó[38;2;232;232;233;48;2;248;248;248m‚ñÇ[38;2;80;78;91;48;2;222;223;234m‚ï∫[38;2;152;145;160;48;2;55;49;50m‚ñé[38;2;34;34;34;48;2;23;23;23m‚ñè[38;2;56;56;56;48;2;36;36;36m‚îç[38;2;18;18;18;48;2;26;26;26m‚ñó[38;2;52;52;52;48;2;32;32;32m‚îì[38;2;33;33;33;48;2;35;32;34m‚ñä[0m[7m[38;2;35;38;33m‚ñù[0m [38;2;20;24;14m           [0m    {f"‚¨• Shell: {shell}"}
        [38;2;0;0;0m               [0m [38;2;77;72;62m‚ñÇ[7m[38;2;119;117;164m‚ñò[0m[38;2;106;102;117;48;2;126;124;190m‚ñó[38;2;215;214;213;48;2;100;94;123m‚ñÇ[38;2;241;240;242;48;2;113;110;116m‚ñÑ[38;2;235;235;236;48;2;109;109;110m‚ñá[38;2;226;226;228;48;2;239;239;240m‚îì[38;2;75;75;75;48;2;238;238;238m‚ñÅ[38;2;78;78;78;48;2;250;250;250m‚ñÉ[38;2;62;62;62;48;2;247;247;247m‚ñÑ[38;2;65;65;65;48;2;251;251;251m‚ñÖ[38;2;69;68;69;48;2;242;242;242m‚ñÑ[38;2;51;50;56;48;2;226;226;227m‚ñÇ[38;2;139;140;151;48;2;236;237;244m‚ñÅ[38;2;217;218;225;48;2;69;67;71m‚ñã[38;2;18;18;19;48;2;34;34;34m‚ñâ[38;2;62;62;63;48;2;31;31;31m‚ñè[38;2;25;25;25;48;2;28;28;28m‚ñè[38;2;73;73;73;48;2;34;34;34m‚ïª[38;2;46;47;46;48;2;34;35;34m‚îí[38;2;32;32;31;48;2;25;28;27m‚ñâ[0m[7m[38;2;35;42;27m‚ïª[0m[38;2;45;54;37m‚ñÉ          [0m    {f"‚¨• Desktop Environment: {desktop_environment}"}
        [38;2;0;0;0m            [0m [38;2;173;171;166m‚ñÉ[38;2;140;134;136m‚ñÖ[38;2;214;214;214;48;2;95;91;86m‚ñÑ[38;2;245;245;244;48;2;131;119;124m‚ñÖ[38;2;239;239;242;48;2;132;126;157m‚ñÜ[38;2;246;246;246;48;2;168;169;167m‚ñá[38;2;135;135;135;48;2;243;243;244m‚ñÇ[38;2;69;68;72;48;2;223;222;228m‚ñÉ[38;2;63;63;65;48;2;201;200;207m‚ñÖ[38;2;57;57;57;48;2;173;173;174m‚ñá[38;2;65;65;65;48;2;45;45;45m‚ï∏[38;2;43;43;43;48;2;46;46;46m‚îà[38;2;44;44;44m‚ï¥[48;2;45;45;45m‚ï¥[38;2;45;44;46;48;2;50;47;47m‚ñÑ[38;2;49;42;48;48;2;44;38;45m‚ï∏[38;2;66;62;70;48;2;166;161;169m‚ñâ[38;2;188;182;188;48;2;79;73;78m‚ñâ[38;2;30;29;32;48;2;23;21;24m‚îÉ[38;2;62;63;62;48;2;30;30;30m‚ñè[38;2;16;16;16;48;2;28;28;28m‚ïª[38;2;65;65;65;48;2;39;39;39m‚ñó[38;2;25;25;25;48;2;32;32;31m‚ï¥[38;2;29;29;29;48;2;34;34;34m‚îí[0m[38;2;37;41;32m‚ñã[0m  [38;2;0;0;0m         [0m     
        [38;2;0;0;0m          [0m [38;2;215;213;210m‚ñÉ[38;2;235;233;234;48;2;133;131;121m‚ñÜ[38;2;249;250;250;48;2;169;167;168m‚ñÜ[38;2;253;253;253;48;2;249;249;249m‚îà[38;2;234;233;239;48;2;250;250;251m‚ñó[38;2;229;228;234;48;2;245;244;246m‚ñù[38;2;237;236;241;48;2;232;232;236m‚îä[38;2;237;236;238;48;2;83;83;85m‚ñò[38;2;42;42;42;48;2;43;43;43m‚ï¥[38;2;43;43;43;48;2;50;50;50m‚ñá[38;2;44;44;44;48;2;42;42;42m‚ñÑ‚ñÜ[48;2;45;45;45m‚ñò[38;2;45;46;46m‚ñÉ[38;2;46;46;46m‚ñÜ[48;2;45;45;44m‚ñç[38;2;44;44;45;48;2;40;39;44m‚ñã[38;2;39;39;44;48;2;40;38;45m‚ñÑ[38;2;55;46;54;48;2;116;98;105m‚ñä[38;2;206;196;198;48;2;67;50;55m‚ñã[38;2;35;33;34;48;2;24;26;25m‚ñâ[38;2;22;22;22;48;2;32;32;32m‚ñè[38;2;23;23;23;48;2;32;33;32m‚ñù[38;2;26;26;26;48;2;31;31;31m‚îà[38;2;81;81;81;48;2;38;38;38m‚ï≤[38;2;33;33;33;48;2;29;29;29m‚ñá[38;2;27;27;27;48;2;33;35;32m‚îë[0m[38;2;38;44;33m‚ññ          [0m    ‚ò∫  ‚òª  ‚ô•  ‚ô¶  ‚ô£  ‚ô†  ‚Ä¢  ‚óò
        [38;2;0;0;0m         [0m [7m[38;2;222;219;220m‚ñò[0m[38;2;234;235;237;48;2;250;249;250m‚ñò[38;2;253;253;253;48;2;253;252;252m‚îä[48;2;252;252;251m‚ñä[38;2;221;220;225;48;2;245;244;246m‚îè[38;2;250;249;253;48;2;247;246;249m‚îä[38;2;244;244;242;48;2;252;252;252m‚ñò[38;2;223;223;229;48;2;76;75;81m‚ñã[38;2;43;43;45;48;2;41;41;41m‚ñé[38;2;42;42;42;48;2;43;43;43m‚ñã[48;2;44;44;44m [48;2;45;45;45m [48;2;46;46;46m    [38;2;46;46;46;48;2;45;45;45m‚ñã[38;2;42;42;45;48;2;44;44;45m‚ñù[38;2;41;42;45;48;2;39;40;45m‚ññ[38;2;60;51;58;48;2;120;98;105m‚ñâ[38;2;128;108;113;48;2;51;45;46m‚ñè[38;2;36;36;36;48;2;35;35;35m‚ïå[48;2;39;39;40m‚ñâ[0m[7m[38;2;48;53;43m‚ñó[38;2;32;34;31m‚ññ[0m[38;2;52;51;50;48;2;45;45;45m‚ï∑[38;2;61;61;61;48;2;38;38;38m‚ï≤[38;2;35;36;33;48;2;34;34;34m‚ï¥[38;2;22;24;22;48;2;32;34;29m‚ï∂[0m[38;2;37;46;28m‚ññ         [0m    ‚óã  ‚óô  ‚ôÇ  ‚ôÄ  ‚ô™  ‚ô´  ‚òº  ‚ñ∫
        [38;2;0;0;0m         [7m[38;2;218;213;215m‚ñã[0m[38;2;246;246;246;48;2;233;234;234m‚ñá[48;2;253;253;253m  [38;2;221;220;226;48;2;250;250;250m‚ñó[38;2;226;225;232;48;2;223;222;228m‚ï∫[38;2;226;225;231;48;2;240;240;243m‚îê[38;2;221;224;249;48;2;251;251;253m‚ñÉ[38;2;181;182;196;48;2;59;59;68m‚ñé[38;2;39;38;44;48;2;42;42;42m‚ñÉ[38;2;64;65;66;48;2;46;46;47m‚ï∑[48;2;45;45;45m [38;2;46;46;46;48;2;46;45;46m‚îà[48;2;46;46;46m     [38;2;45;45;45;48;2;44;44;44m‚ñá[38;2;41;40;46;48;2;44;44;46m‚ñù[38;2;40;40;45;48;2;43;40;46m‚îä[38;2;97;87;93;48;2;45;36;41m‚ñó[38;2;35;35;35;48;2;39;39;39m‚îä[38;2;36;37;37;48;2;36;36;37m‚îà[0m[38;2;36;39;33m‚ñâ[0m [7m[38;2;29;33;24m‚ñÉ[0m[38;2;80;79;78;48;2;37;39;35m‚ï≤[38;2;46;46;46;48;2;30;30;30m‚ñè[38;2;35;35;33;48;2;34;35;33m‚îä[0m [38;2;30;40;18m         [0m    ‚óÑ  ‚Üï  ‚Äº  ¬∂  ¬ß  ‚ñ¨  ‚Ü®  ‚Üë
        [38;2;0;0;0m         [7m[38;2;202;198;195m‚ñã[0m[38;2;236;235;234;48;2;252;252;252m‚ñè[38;2;253;253;252;48;2;253;252;253m‚ñÅ[38;2;254;252;253;48;2;252;252;252m‚ï¥[38;2;211;210;218;48;2;227;227;238m‚ïπ[38;2;210;214;249;48;2;225;225;240m‚ñÉ[38;2;196;199;233;48;2;135;138;168m‚ñâ[38;2;57;58;70;48;2;190;195;231m‚ñÖ[38;2;37;39;45;48;2;39;41;49m‚îà[38;2;36;38;45;48;2;38;38;45m‚ï±[38;2;43;39;46;48;2;66;64;68m‚ñá[38;2;75;61;67;48;2;58;52;54m‚ï¥[48;2;46;45;46m [38;2;46;45;45m‚ñÇ[48;2;46;46;46m [38;2;46;46;46;48;2;46;46;45m‚îà[48;2;46;46;46m  [48;2;46;46;45m‚îà[48;2;45;45;45m [38;2;44;43;45;48;2;41;40;45m‚ñã[38;2;44;36;44;48;2;49;43;50m‚îä[38;2;100;89;95;48;2;129;126;128m‚ññ[38;2;135;135;135;48;2;44;44;45m‚ññ[38;2;37;36;38;48;2;37;38;37m‚îä[0m[38;2;34;40;27m‚ñå [38;2;28;35;24m‚ñù[38;2;29;34;24;48;2;36;37;34m‚ñè[38;2;35;36;34;48;2;27;36;18m‚ñâ[0m [38;2;30;40;17m         [0m    ‚Üì  ‚Üí  ‚Üê  ‚àü  ‚Üî  ‚ñ≤  ‚ñº  *
        [38;2;0;0;0m         [0m [7m[38;2;197;197;191m‚ññ[0m[38;2;252;253;250;48;2;243;243;249m‚ï¥[38;2;212;216;249;48;2;242;243;251m‚ñÖ[38;2;183;188;228;48;2;196;201;238m‚îì[38;2;128;130;160;48;2;197;202;239m‚ñÅ[38;2;201;205;242;48;2;67;69;80m‚ñò[38;2;40;39;46;48;2;39;39;46m‚ï¥[38;2;41;40;46m‚ñÉ[38;2;40;40;46;48;2;38;39;44m‚ñÇ[38;2;37;40;45m‚ï∂[38;2;45;40;45;48;2;64;51;55m‚ñâ[38;2;74;62;65;48;2;48;46;45m‚ññ[38;2;44;46;45;48;2;46;45;47m‚ñã[38;2;46;45;46;48;2;46;46;45m‚ñè[48;2;46;46;46m   [38;2;45;46;46m‚îä[38;2;46;46;46;48;2;45;45;45m‚ñã[38;2;44;45;45;48;2;42;43;46m‚ñä[38;2;41;42;47;48;2;40;39;45m‚ñè[38;2;134;126;129;48;2;55;46;54m‚ñù[38;2;149;148;150;48;2;124;124;123m‚ñâ[38;2;76;76;76;48;2;37;37;37m‚ñè[0m[38;2;39;45;32m‚ñå [0m [7m[38;2;37;40;34m‚ñè[38;2;33;37;27m‚ñó[0m[38;2;3;5;2m          [0m
        [38;2;0;0;0m           [7m[38;2;236;232;237m‚ñç[0m[38;2;252;252;252;48;2;217;221;246m‚ñÖ[38;2;47;47;48;48;2;175;176;192m‚ñó[38;2;45;45;48;48;2;100;100;122m‚ñá[38;2;45;45;45;48;2;40;39;45m‚ñÜ[48;2;41;41;45m‚ñÜ[38;2;44;44;45;48;2;42;42;46m‚ñÜ[38;2;42;42;45;48;2;41;41;46m‚ñÑ[38;2;40;41;45;48;2;38;40;44m‚ñä[38;2;39;39;46;48;2;44;38;46m‚ñâ[38;2;63;51;54;48;2;52;41;46m‚îÇ[38;2;45;46;44;48;2;46;45;46m‚ñé[38;2;46;46;46;48;2;46;46;45m‚îà[48;2;46;46;46m    [48;2;45;45;45m‚ñã[38;2;44;44;45;48;2;42;41;46m‚ñä[38;2;40;40;46;48;2;39;40;45m‚ñé[38;2;39;39;45;48;2;55;40;48m‚ñâ[38;2;118;106;111;48;2;49;47;42m‚ñò[0m[7m[38;2;33;37;27m‚ñÑ[0m  [7m[38;2;59;65;54m‚ñò[38;2;41;45;38m‚ñó[0m [38;2;0;0;0m          [0m
        [38;2;0;0;0m           [7m[38;2;229;225;224m‚ñç[0m[38;2;242;242;242;48;2;253;253;252m‚ñÅ[38;2;216;216;216;48;2;53;53;54m‚ñè[38;2;44;44;44;48;2;46;46;46m‚ñá[48;2;45;45;45m‚ñÅ[38;2;45;45;45;48;2;46;46;46m‚ñÑ[38;2;45;45;46;48;2;44;44;45m‚ñù[38;2;44;44;44;48;2;42;42;45m‚ñã[38;2;41;41;45;48;2;39;40;45m‚ñã[38;2;39;39;47;48;2;38;39;45m‚îä[38;2;49;39;44;48;2;62;53;55m‚ñâ[38;2;46;45;43;48;2;47;46;45m‚ï¥[48;2;45;45;45m [38;2;45;45;45;48;2;46;46;46m‚ñÉ‚ñÜ[38;2;44;44;44;48;2;45;45;45m‚ñÖ‚ñÉ[38;2;44;44;45m‚ñÇ[38;2;43;43;44;48;2;41;40;44m‚ñã[38;2;39;39;45;48;2;39;40;45m‚ñá[48;2;49;39;44m‚ñâ[0m[38;2;67;55;45m‚ñé [38;2;88;97;80m‚ï∂[7m[38;2;113;120;107m‚ñÉ[0m[38;2;47;51;41m‚ñò            [0m
        [38;2;0;0;0m           [7m[38;2;236;233;233m‚ñé[0m[38;2;250;250;250;48;2;229;229;229m‚ñÜ[38;2;223;223;223;48;2;58;58;58m‚ñÜ[38;2;217;217;218;48;2;48;48;49m‚ñÖ[38;2;218;217;221;48;2;52;52;52m‚ñÑ[38;2;220;220;224;48;2;59;59;60m‚ñÉ[38;2;210;210;214;48;2;46;46;47m‚ñÉ[38;2;219;220;225;48;2;56;56;59m‚ñÇ[38;2;192;194;213;48;2;44;44;50m‚ñÇ[38;2;156;161;191;48;2;36;37;44m‚ñÇ[38;2;171;173;212;48;2;44;40;51m‚ñÅ[38;2;49;47;46;48;2;59;52;55m‚îä[38;2;46;45;45;48;2;45;45;45m‚ñé[38;2;44;44;44;48;2;43;43;43m‚ñå[38;2;41;41;41m‚ñÖ[38;2;40;40;40;48;2;42;42;42m‚ñÖ‚ñÖ[38;2;39;39;43;48;2;42;42;44m‚ñÖ[38;2;36;36;41;48;2;39;39;44m‚ñÉ[38;2;37;38;43;48;2;38;39;44m‚ñÉ[38;2;36;40;45;48;2;48;46;47m‚ï¥[0m [38;2;33;33;23m                [0m
        [38;2;0;0;0m          [7m[38;2;142;141;124m‚ñâ[0m[38;2;198;192;186;48;2;245;244;242m‚ñè[38;2;198;203;191;48;2;248;248;248m‚ñÅ[38;2;183;187;175;48;2;228;228;228m‚ñÅ[38;2;177;182;171;48;2;223;223;225m‚ñÅ[38;2;179;184;174;48;2;221;220;225m‚ñÅ[38;2;181;186;176;48;2;220;220;224m‚ñÅ[38;2;180;185;176;48;2;220;220;225m‚ñÅ[38;2;179;185;178;48;2;219;220;226m‚ñÅ[38;2;177;183;179;48;2;212;214;229m‚ñÅ[38;2;168;174;182;48;2;190;193;228m‚ñÅ[38;2;158;168;184;48;2;184;189;231m‚ñÅ[38;2;81;72;82;48;2;168;167;201m‚ñù[38;2;45;44;45;48;2;55;53;54m‚îä[38;2;61;66;52;48;2;45;45;44m‚ñÅ[38;2;62;67;54;48;2;44;44;44m‚ñÅ[38;2;61;66;52;48;2;44;44;43m‚ñÅ[38;2;60;66;52;48;2;43;44;43m‚ñÅ[38;2;60;65;51;48;2;43;43;44m‚ñÅ[38;2;58;63;51;48;2;40;40;43m‚ñÅ[38;2;55;61;51;48;2;38;38;43m‚ñÅ[0m[38;2;54;51;47m‚ñä                 [0m
        [?25h
    """

    puts(var)


class HttpHandler(BaseHTTPRequestHandler):
    def maid_log_for_me(self, log):
        log["datetime"] = str(datetime.now())

        url = log["path"]
        parsed_url = urlparse(url)
        captured_value = parse_qs(parsed_url.query)
        log["keys"] = dict(captured_value)
        print("captured_value", captured_value)

        parsed = json.dumps(log, sort_keys=True)
        logging.info(parsed)

        with open("apron/output/mitm_log.jsonl", "a") as f:
            f.write(f"{parsed}\n")
            f.close()

    def set_response(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        self.maid_log_for_me(
            {
                "type": "GET",
                "path": str(self.path),
                "headers": str(self.headers),
            }
        )
        self.set_response()
        self.wfile.write("GET request for {}".format(self.path).encode('utf-8'))

    def do_POST(self):
        content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
        post_data = self.rfile.read(content_length) # <--- Gets the data itself
        self.maid_log_for_me(
            {
                "type": "POST",
                "path": str(self.path),
                "headers": str(self.headers),
                "body": post_data.decode('utf-8'),
            }
        )
        self.set_response()
        self.wfile.write("POST request for {}".format(self.path).encode('utf-8'))

def mint_server(args):
    server_class=HTTPServer 
    handler_class=HttpHandler
    address="localhost"
    port=8000

    if key_value("address", args):
        address = key_value("address", args)

    if key_value("port", args):
        port = key_value("port", args)

    logging.basicConfig(level=logging.INFO)
    server_address = (address, port)
    httpd = server_class(server_address, handler_class)
    puts(f"Start server :: {address}:{port}", "green")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        httpd.server_close()
        puts(f"Stopping server :: {address}:{port}", "green")

def shell(args):

    if len(args) < 2:
        banner()
        return 255

    if args[1] == "help":
        verbose = False
        for x in args:
            if x == "-v":
                verbose = True
        help(verbose)
    elif args[1] == "banner":
        banner()
    elif args[1] == "status":
        maidztop()
    elif args[1] == "install":
        install_deps()
    elif args[1] == "query":
        data = import_bank()
        query(data["general"], args)
    elif args[1] == "mitm.server":    
        mint_server(args)
    else:
        data = import_bank()
        out = exec(query(data["general"], args))
        return out

    return 0


if __name__ == "__main__":
    try:
        shell(sys.argv)
    except Exception as err:
        puts(str(err), "red")
