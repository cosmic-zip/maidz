{
    "general": [
        {
            "description": "Securely deletes and overwrites the contents of a device seven times",
            "name": "nuke.hd",
            "command": "shred -vzn 7 @@device"
        },
        {
            "description": "Securely deletes and overwrites a file seven times, then removes it from the filesystem to prevent data recovery.",
            "name": "nuke.file",
            "command": "shred -u -z -n 7 @@file"
        },
        {
            "description": "Applogs typically refer to logs generated by specific applications or software. They contain information about the operation, performance, and errors of the application.",
            "name": "view.applogs",
            "command": "find /var/log -type f -name \"*.log\" -exec tail -n 1000 {} \\;"
        },
        {
            "description": "syslog: General system messages.",
            "name": "view.syslog",
            "command": "tail -n 1000 /var/log/syslog"
        },
        {
            "description": "messages: System messages, including kernel and service messages.",
            "name": "view.messages",
            "command": "tail -n 1000 /var/log/messages"
        },
        {
            "description": "authlog: Authentication-related messages.",
            "name": "view.authlog",
            "command": "tail -n 1000 /var/log/auth.log"
        },
        {
            "description": "secure: Security-related messages, including authentication and authorization events.",
            "name": "view.secure",
            "command": "tail -n 1000 /var/log/secure"
        },
        {
            "description": "kernlog: Kernel-related messages.",
            "name": "view.kernlog",
            "command": "tail -n 1000 /var/log/kern.log"
        },
        {
            "description": "auditlog: Audit messages, tracking system events for security auditing.",
            "name": "view.auditlog",
            "command": "tail -n 1000 /var/log/audit/audit.log"
        },
        {
            "description": "wtmp: Records all user logins and logouts.",
            "name": "view.wtmp",
            "command": "last -n 1000"
        },
        {
            "description": "btmp: Records failed login attempts.",
            "name": "view.btmp",
            "command": "lastb -n 1000"
        },
        {
            "description": "lastlog: Records last login information for all users.",
            "name": "view.lastlog",
            "command": "tail -n 1000 /var/log/lastlog"
        },
        {
            "description": "lsof alias",
            "name": "file.by",
            "command": "lsof @@file_path"
        },
        {
            "description": "creates  a hex dump of a given file or standard input.",
            "name": "file.hex",
            "command": "xxd @@file"
        },
        {
            "description": "Switch to bits (binary digits) dump, rather than hex dump.",
            "name": "file.bin",
            "command": "xxd -b @@file"
        },
        {
            "description": "Takes a hexadecimal dump and converts it back into binary format.",
            "name": "file.dec",
            "command": "xxd -d @@file"
        },
        {
            "description": "Output in PostScript continuous hex dump style. Also known as plain hex dump style.",
            "name": "file.dump",
            "command": "xxd -ps @@file"
        },
        {
            "description": "Create a C header file from a binary file. This header file contains a C array definition representing the binary data in hexadecimal format.",
            "name": "file.list",
            "command": "xxd -i @@file"
        },
        {
            "description": "Utility used to determine the type of a file.",
            "name": "file",
            "command": "file @@file"
        },
        {
            "description": "Extracts and displays all metadata from an image file using exiftool.",
            "name": "meta.img",
            "command": "exiftool @@file"
        },
        {
            "description": "Removes all metadata from an image to protect privacy",
            "name": "clean.image",
            "command": "exiftool -all= @@image"
        },
        {
            "description": "scans a domain for directories with a specified wordlist, and saves the results to an output file.",
            "name": "dns.attack.subs",
            "command": "dirb @@domain -w @@wordlist -o @@output"
        },
        {
            "description": "It scans a domain for subdomains using the specified wordlist and saves the results to an output file.",
            "name": "dns.attack.file",
            "command": "dnsenum --enum @@domain -t 15 --threads 4 -f @@wordlist -o @@output"
        },
        {
            "description": "Default set of nmap NSE scripts, same as nmap [options] -sC [ip or dns]",
            "name": "map.default",
            "command": "nmap -T3 -D RND:8 --script default @@target"
        },
        {
            "description": "Try to actively discover more about the network by querying public registries, SNMP-enabled devices, directory services, and the like.",
            "name": "map.discovery",
            "command": "nmap -T3 -D RND:88 --script discovery @@target"
        },
        {
            "description": "Deal with authentication credentials (or bypassing them) on the target system",
            "name": "map.auth",
            "command": "nmap -T3 -D RND:8 --script auth @@target"
        },
        {
            "description": "Perform general network discovery, are less likely to offend remote administrators",
            "name": "map.safe",
            "command": "nmap -T3 -D RND:8 --script safe @@target"
        },
        {
            "description": "Check for specific known vulnerabilities and generally only report results if they are found.",
            "name": "map.vuln",
            "command": "nmap -T3 -D RND:8 --script vuln @@target"
        },
        {
            "description": "Scan local open connections",
            "name": "map.local",
            "command": "ss -tupanr"
        },
        {
            "description": "Remove all firewall rules non-resible",
            "name": "firewall.flush",
            "command": "ip6tables -F && iptables -F"
        },
        {
            "description": "Drop all incomme connections",
            "name": "firewall.drop.in.all",
            "command": "iptables -A INPUT -p tcp -j DROP && iptables -A INPUT -p udp -j DROP && ip6tables -A INPUT -p tcp -j DROP && ip6tables -A INPUT -p udp -j DROP"
        },
        {
            "description": "Derop all outcome connections",
            "name": "firewall.drop.out.all",
            "command": "iptables -A OUTPUT -p tcp -j DROP && iptables -A OUTPUT -p udp -j DROP && ip6tables -A OUTPUT -p tcp -j DROP && ip6tables -A OUTPUT -p udp -j DROP"
        },
        {
            "description": "Drop all outcome port bigger than expecified port",
            "name": "firewall.drop.bigger",
            "command": "iptables -A OUTPUT -p tcp --dport @@port: -j DROP && iptables -A OUTPUT -p udp --dport @@port: -j DROP && ip6tables -A OUTPUT -p tcp --dport @@port: -j DROP &&    ip6tables -A OUTPUT -p udp --dport @@port: -j DROP"
        },
        {
            "description": "Full website downloader",
            "name": "web.donwload",
            "command": "wget --recursive --no-clobber --page-requisites --html-extension --convert-links --restrict-file-names=windows --random-wait --wait=@@wait --limit-rate=200k --tries=inf --domains example.com --no-parent @@url"
        },
        {
            "description": "Copies the current hosts file to a backup location, then replaces it with a new hosts file from a specified directory.",
            "name": "install.hosts",
            "command": "cp /etc/hosts /etc/hosts-bk && cp ./data/hosts/hosts /etc/hosts && echo done"
        },
        {
            "description": "Enables Bluetooth functionality by bringing up the hci0 interface, unblocking Bluetooth, and printing 'done'.",
            "name": "blue.enable",
            "command": "sudo hciconfig hci0 up > /dev/null 2>&1 && sudo hciconfig hci0 > /dev/null 2>&1 && sudo rfkill unblock bluetooth > /dev/null 2>&1 && echo done"
        },
        {
            "description": "Lists Bluetooth devices and their status.",
            "name": "blue.list",
            "command": "rfkill list"
        },
        {
            "description": "Creates a directory named 'out' and copies files from a specified folder to a remote host via SCP.",
            "name": "scp.copy",
            "command": "mkdir out && scp -P @@port @@folder/* hostuser@@@ip:./out/"
        },
        {
            "description": "Generates a long random username and password, then performs a POST request to a specified domain with the generated credentials.",
            "name": "dos.longpass",
            "command": "curl -X POST @@domain -H 'Content-Type: application/json' -d '{\"username\": \"random_user_\"$(openssl rand -base64 @@size),\"password\": \"random_password_\"$(openssl rand -base64 @@size)}'"
        },
        {
            "description": "Sends a POST request with JSON data containing a 'main' field and a message field specified by @@message to a specified domain.",
            "name": "span.text",
            "command": "curl -X POST -H \"Content-Type: application/json\" -d '{\"main\": \"somename\", \"@@message\": \"somemsg\"}' @@domain"
        },
        {
            "description": "Break ZIP file encryption using Hashcat",
            "name": "break.zip",
            "command": "hashcat -m 13600 -a 0 @@file @@wordlist"
        },
        {
            "description": "Break LUKS1 disk image encryption using Hashcat",
            "name": "break.luks1",
            "command": "hashcat -m 14600 -a 0 @@file @@wordlist"
        },
        {
            "description": "Break LUKS2 disk image encryption using Hashcat",
            "name": "break.luks2",
            "command": "hashcat -m 29600 -a 0 @@file @@wordlist"
        },
        {
            "description": "Break KeePass database encryption using Hashcat",
            "name": "break.keepass",
            "command": "hashcat -m 13400 -a 0 @@file @@wordlist"
        },
        {
            "description": "Break WPA/WPA2 encryption in PCAP files using Hashcat",
            "name": "break.pcap",
            "command": "hcxpcapngtool -o hash.hc22000 @@file && hashcat -m 22000 -a 0 hash.hc22000 @@wordlist"
        },
        {
            "description": "Capture all packets on a specified network interface.",
            "name": "capture.all",
            "command": "tcpdump -i @@interface -w capture.pcap"
        },
        {
            "description": "Capture all packets from/to a specified IP address on a specified network interface.",
            "name": "capture.all.from_ip",
            "command": "tcpdump -i @@interface host @@ip -w capture.pcap"
        },
        {
            "description": "Capture only one packet on a specified network interface.",
            "name": "capture.one",
            "command": "tcpdump -i @@interface -c 1 -w capture.pcap"
        },
        {
            "description": "Capture only one packet from/to a specified IP address on a specified network interface.",
            "name": "capture.one.from_ip",
            "command": "tcpdump -i @@interface host @@ip -c 1 -w capture.pcap"
        },
        {
            "description": "Create a disk dump from a specified input device to an output file.",
            "name": "disk.dump",
            "command": "dd if=@@device of=@@file bs=4M"
        },
        {
            "description": "Carve files from a specified disk image using foremost.",
            "name": "disk.recover",
            "command": "foremost -i @@image -o @@folder"
        }       
    ],
    "nuke": [
        {
            "name": "nuke.historic.unset_HISTFILE",
            "command": "unset HISTFILE"
        },
        {
            "name": "nuke.historic.clear_history",
            "command": "history -c"
        },
        {
            "name": "nuke.historic.clear_sh_history",
            "command": "cat /dev/null > ~/.sh_history"
        },
        {
            "name": "nuke.historic.clear_bash_history",
            "command": "cat /dev/null > ~/.bash_history"
        },
        {
            "name": "nuke.historic.clear_zsh_history_1",
            "command": "history -c"
        },
        {
            "name": "nuke.historic.clear_zsh_history_2",
            "command": "history -w"
        },
        {
            "name": "nuke.historic.clear_zsh_history_3",
            "command": "cat /dev/null > ~/.zsh_history"
        },
        {
            "name": "nuke.historic.clear_zsh_history_4",
            "command": "history -c"
        },
        {
            "name": "nuke.historic.clear_zsh_history_5",
            "command": "history -w"
        },
        {
            "name": "nuke.logs.syslog",
            "command": "cat /dev/null > /var/log/syslog"
        },
        {
            "name": "nuke.logs.messages",
            "command": "cat /dev/null > /var/log/messages"
        },
        {
            "name": "nuke.logs.authlog",
            "command": "cat /dev/null > /var/log/auth.log"
        },
        {
            "name": "nuke.logs.secure",
            "command": "cat /dev/null > /var/log/secure"
        },
        {
            "name": "nuke.logs.kernlog",
            "command": "cat /dev/null > /var/log/kern.log"
        },
        {
            "name": "nuke.logs.applogs_1",
            "command": "find /var/log -type f -name '*.log' -exec cat /dev/null > {} \\;"
        },
        {
            "name": "nuke.logs.auditlog",
            "command": "cat /dev/null > /var/log/audit/audit.log"
        },
        {
            "name": "nuke.logs.loginlogs_wtmp",
            "command": "cat /dev/null > /var/log/wtmp"
        },
        {
            "name": "nuke.logs.loginlogs_btmp",
            "command": "cat /dev/null > /var/log/btmp"
        },
        {
            "name": "nuke.logs.loginlogs_lastlog",
            "command": "cat /dev/null > /var/log/lastlog"
        },
        {
            "name": "nuke.logs.alllogs_1",
            "command": "cat /dev/null > /var/log/syslog"
        },
        {
            "name": "nuke.logs.alllogs_2",
            "command": "cat /dev/null > /var/log/messages"
        },
        {
            "name": "nuke.logs.alllogs_3",
            "command": "cat /dev/null > /var/log/auth.log"
        },
        {
            "name": "nuke.logs.alllogs_4",
            "command": "cat /dev/null > /var/log/secure"
        },
        {
            "name": "nuke.logs.alllogs_5",
            "command": "cat /dev/null > /var/log/kern.log"
        },
        {
            "name": "nuke.logs.alllogs_6",
            "command": "find /var/log -type f -name '*.log' -exec cat /dev/null > {};"
        },
        {
            "name": "nuke.logs.alllogs_7",
            "command": "cat /dev/null > /var/log/audit/audit.log"
        },
        {
            "name": "nuke.logs.alllogs_8",
            "command": "cat /dev/null > /var/log/wtmp"
        },
        {
            "name": "nuke.logs.alllogs_9",
            "command": "cat /dev/null > /var/log/btmp"
        },
        {
            "name": "nuke.logs.alllogs_10",
            "command": "cat /dev/null > /var/log/lastlog"
        }
    ],
    "dns": [
        {
            "name": "dns.a",
            "command": "dig @@domain A +short"
        },
        {
            "name": "dns.aaaa",
            "command": "dig @@domain AAAA +short"
        },
        {
            "name": "dns.cname",
            "command": "dig @@domain CNAME +short"
        },
        {
            "name": "dns.mx",
            "command": "dig @@domain MX +short"
        },
        {
            "name": "dns.ns",
            "command": "dig @@domain NS +short"
        },
        {
            "name": "dns.txt",
            "command": "dig @@domain TXT +short"
        },
        {
            "name": "dns.soa",
            "command": "dig @@domain SOA +short"
        },
        {
            "name": "dns.srv",
            "command": "dig @@domain SRV +short"
        },
        {
            "name": "dns.ptr",
            "command": "dig @@domain PTR +short"
        },
        {
            "name": "dns.dnskey",
            "command": "dig @@domain DNSKEY +short"
        },
        {
            "name": "extras.whois",
            "command": "whois @@domain"
        },
        {
            "name": "extras.robots.txt",
            "command": "curl -sS -L https://@@domain/robots.txt"
        },
        {
            "name": "extras.sitemap",
            "command": "curl -sS -L https://@@domain/sitemap.xml"
        }
    ],
    "deps": [
        "nmap",
        "dirb",
        "dnsenum",
        "libc-bin",
        "iproute2",
        "xxd",
        "iptables",
        "coreutils",
        "wget",
        "curl",
        "dnsutils",
        "traceroute",
        "openssl",
        "openssh-server",
        "xattr",
        "libimage-exiftool-perl",
        "tor",
        "foremost"
    ]
}